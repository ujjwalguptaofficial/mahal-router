---
name: router_view.mahal
description:
dateCreated: October 25, 2022
---

<html>
<div>
	<in-place :of="name" :ref(compInstance) />
</div>
</html>

<script>
import { reactive, merge, Component } from "mahal";
import { BaseComponent } from "./base";
import { ERROR_TYPE, ROUTER_LIFECYCLE_EVENT } from "../enums";
import { IRouteFindResult, IRoute } from "../interfaces";
import { ErrorHelper } from "../helpers";

const pathVisited = [];

window["pathVisited"] = pathVisited;

const routerView = [];
window["routerView"] = routerView;

export default class extends BaseComponent {
    @reactive
    name: String;

    pathname: string;

    compInstance: Component;

    isDestroyed = false;

    onInit() {
        routerView.push(this);
        this.waitFor("mount").then((_) => {
            if (!this.pathname) {
                this.loadComponent();
            }
        });
        const onNavigate = this.onNavigate.bind(this);
        this.waitFor("create").then(() => {
            this.router.on(ROUTER_LIFECYCLE_EVENT.Navigate, onNavigate);
        });
        this.on("destroy", () => {
            this.compInstance = null;
            this.router.off(ROUTER_LIFECYCLE_EVENT.Navigate, onNavigate);
            this.isDestroyed = true;
            console.log("destroyed");
            const currentRoute = routerView.findIndex((q) => q === this);
            routerView.splice(currentRoute, 1);
        });
    }

    onNavigate() {
        if (this.isDestroyed) {
            return;
        }

        const splittedPath: string[] = this.splittedPath;
        let isSameRoute = false;

        const samePathIndex = splittedPath.findIndex(
            (q) => q === this.pathname
        );

        if (samePathIndex >= 0) {
            isSameRoute = true;
            if (samePathIndex === splittedPath.length - 1) {
                return new ErrorHelper(ERROR_TYPE.SameRoute).get();
            }
            return;
        }

        const index = pathVisited.findIndex((q) => q === this.pathname);
        if (index >= 0) {
            pathVisited.splice(index);
        }
        this.pathname = null;
        return this.loadComponent();
    }

    get reqRoute(): IRoute {
        return this.router["_nextPath_"];
    }

    get activeRoute(): IRoute {
        return this.router["_prevPath_"];
    }

    loadComponent() {
        const splittedPath: string[] = this.splittedPath;
        // if the router view is eligible for changing the component
        const isRuterViewEligible = pathVisited.length < splittedPath.length;
        let matchedRoute;
        return new Promise<void>((res) => {
            if (isRuterViewEligible) {
                const pathToLoad = splittedPath.slice(pathVisited.length)[0];
                matchedRoute = this.router["_matched_"][pathToLoad];

                if (!matchedRoute) {
                    throw new Error(
                        `Could not find route for path - ${this.reqRoute.path}`
                    );
                }
            }
            if (!isRuterViewEligible) {
                this.name = null;
                return res();
            }
            Object.assign(this.route, this.reqRoute);

            this.onCompEvaluated(matchedRoute).then(res);
        });
    }

    onCompEvaluated(result: IRouteFindResult) {
        let comp;
        return new Promise<void>((res, rej) => {
            const changeComponent = (val) => {
                if (!val) return res();
                const componentName = comp.name || "anonymous";
                const setName = () => {
                    this.children = {
                        [componentName]: comp,
                    };
                    this.name = componentName;
                    this.waitFor("update").then(res);
                    this.waitFor("error").then(rej);
                };
                if (this.name && this.name === componentName) {
                    this.name = null;
                    this.waitFor("update").then((_) => {
                        setName();
                    });
                } else {
                    setName();
                }
            };
            comp = result.comp;
            pathVisited.push(result.path);
            this.pathname = result.path;
            this.route.param = merge({}, result.param);
            changeComponent(true);
        });
    }
}
</script>

<style>
</style>
